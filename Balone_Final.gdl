;;MIT License

;;Copyright (c) 2016 Johannes KÃ¶rner

;;Permission is hereby granted, free of charge, to any person obtaining a copy
;;of this software and associated documentation files (the "Software"), to deal
;;in the Software without restriction, including without limitation the rights
;;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;copies of the Software, and to permit persons to whom the Software is
;;furnished to do so, subject to the following conditions:

;;The above copyright notice and this permission notice shall be included in all
;;copies or substantial portions of the Software.

;;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;SOFTWARE.

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Balone
;;
;; Code Structure       | Defined Predicates
;; - - - - - - - - - - - - - - - - - - - - - - - -
;; #1 Roles               (role)
;; #2 Initial State       (init)
;; #3 Board Logic         (neighboring, ni)
;; #4 Dynamic Components  (next)
;; #5 Legal Moves         (legal)
;; #6 Goals               (goal)
;; #7 Terminal States     (terminal)
;; #8 Helpers             (opponent, player,++, --, more, less, equal)
;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;; #0 General Stuff and
;;    Visualization
;;;;;;;;;;;;;;;;;;;;;;;;;

(init_time 5)
(move_time 1)

;; (board 5 5)
(show x (show blue x))
(show o (show red o))


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #1 Roles
;;;;;;;;;;;;;;;;;;;;;;;;;

(role x)
(role o)


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #2 Initial State
;;;;;;;;;;;;;;;;;;;;;;;;;

;; Each player starts with 4 pebbles (x and o). The players start in opposing
;; corners, 'x' begins. 'b' stands for blank
;; |o|o|b|b|b|
;; |o|o|b|b|b|
;; |b|b|b|b|b|
;; |b|b|b|x|x|
;; |b|b|b|x|x|

(init (cell 1 1 b))
(init (cell 1 2 b))
(init (cell 1 3 b))
(init (cell 1 4 o))
(init (cell 1 5 o))
(init (cell 2 1 b))
(init (cell 2 2 b))
(init (cell 2 3 b))
(init (cell 2 4 o))
(init (cell 2 5 o))
(init (cell 3 1 b))
(init (cell 3 2 b))
(init (cell 3 3 b))
(init (cell 3 4 b))
(init (cell 3 5 b))
(init (cell 4 1 x))
(init (cell 4 2 x))
(init (cell 4 3 b))
(init (cell 4 4 b))
(init (cell 4 5 b))
(init (cell 5 1 x))
(init (cell 5 2 x))
(init (cell 5 3 b))
(init (cell 5 4 b))
(init (cell 5 5 b))
(init (control x))
(init (pebbles x 4))
(init (pebbles o 4))


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #3 Board Logic
;;;;;;;;;;;;;;;;;;;;;;;;;

;; 8-neighborhood, used to help determine legal moves
(<= (neighboring ?r ?c ?r_ ?c_)
  (++ ?r ?r_)
  (equal ?c ?c_)
)
(<= (neighboring ?r ?c ?r_ ?c_)
  (-- ?r ?r_)
  (equal ?c ?c_)
)
(<= (neighboring ?r ?c ?r_ ?c_)
  (++ ?c ?c_)
  (equal ?r ?r_)
)
(<= (neighboring ?r ?c ?r_ ?c_)
  (-- ?c ?c_)
  (equal ?r ?r_)
)
(<= (neighboring ?r ?c ?r_ ?c_)
  (++ ?r ?r_)
  (++ ?c ?c_)
)
(<= (neighboring ?r ?c ?r_ ?c_)
  (++ ?r ?r_)
  (-- ?c ?c_)
)
(<= (neighboring ?r ?c ?r_ ?c_)
  (-- ?r ?r_)
  (++ ?c ?c_)
)
(<= (neighboring ?r ?c ?r_ ?c_)
  (-- ?r ?r_)
  (-- ?c ?c_)
)

;; next index, used to check directions
;; As moves are defined by the transition of the first pebble, we need to be
;; able to find out how the line on which we move continues.
(ni 1 2 3)
(ni 2 3 4)
(ni 3 4 5)
(ni 5 4 3)
(ni 4 3 2)
(ni 3 2 1)
(ni ?x ?x ?x)


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #4 Dynamic Components
;;;;;;;;;;;;;;;;;;;;;;;;;

;; move 1       -> move one pebble to blank space
;; move 2a      -> move two pebbles to blank space
;; move 2b      -> move two pebbles pushing one pebble to free space
;; move 2c      -> move two pebbles pushing one pebble off the board
;; move 3a      -> move three pebbles to blank space
;; move 3b      -> move three pebbles pushing one pebble to free space
;; move 3c      -> move three pebbles pushing one pebble off the board
;; move 3d      -> move three pebbles pushing two pebbles to free space
;; move 3e      -> move three pebbles pushing two pebbles, one off the board

;; Moves, independent of the numbers of pebbles pushed, are always defined by
;; the first pebble. From the first pebble and the direction, pushing is then
;; detected by checking the surroundings.

;; The player moves directly to the cell.

(<= (next (cell ?r ?c ?player))
  (does ?player (move1 ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move2a ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move2b ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move2c ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3a ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3b ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3c ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3d ?r_ ?c_ ?r ?c))
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3e ?r_ ?c_ ?r ?c))
)

;; The player moves to the cell by pushing two or three of his pebbles. This
;; works by checking if we are pushing 2 or three pebbles and the cell is where
;; the second pebble should be.

(<= (next (cell ?r ?c ?player))
  (does ?player (move2a ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move2b ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move2c ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3a ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3b ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3c ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3d ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3e ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r)
  (ni ?c1 ?c2 ?c)
)

;; The player moves to the cell by pushing three of his pebbles. This is
;; different from the previous statements, as we check for the third pebble now.

(<= (next (cell ?r ?c ?player))
  (does ?player (move3a ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3) ;; notice how the direction information is used to calculate
  (ni ?c1 ?c2 ?c3) ;; the positions of the whole "pebble train"
  (ni ?r2 ?r3 ?r)
  (ni ?c2 ?c3 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3b ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3)
  (ni ?c1 ?c2 ?c3)
  (ni ?r2 ?r3 ?r)
  (ni ?c2 ?c3 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3c ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3)
  (ni ?c1 ?c2 ?c3)
  (ni ?r2 ?r3 ?r)
  (ni ?c2 ?c3 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3d ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3)
  (ni ?c1 ?c2 ?c3)
  (ni ?r2 ?r3 ?r)
  (ni ?c2 ?c3 ?c)
)
(<= (next (cell ?r ?c ?player))
  (does ?player (move3e ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3)
  (ni ?c1 ?c2 ?c3)
  (ni ?r2 ?r3 ?r)
  (ni ?c2 ?c3 ?c)
)

;; One player pebble gets pushed by two opponent pebbles.
(<= (next (cell ?r ?c ?player))
  (opponent ?player ?opponent) ;; who is the opponent?
  (does ?opponent (move2b ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3)
  (ni ?c1 ?c2 ?c3)
  (ni ?r2 ?r3 ?r)
  (ni ?c2 ?c3 ?c)
)

;; One player pebble gets pushed by three opponent pebbles.
(<= (next (cell ?r ?c ?player))
  (opponent ?player ?opponent)
  (does ?opponent (move3b ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3)
  (ni ?c1 ?c2 ?c3)
  (ni ?r2 ?r3 ?r4)
  (ni ?c2 ?c3 ?c4)
  (ni ?r3 ?r4 ?r)
  (ni ?c3 ?c4 ?c)
)

;; Two player pebble get pushed by three opponent pebbles, one of them will
;; occupy the cell.
(<= (next (cell ?r ?c ?player))
  (opponent ?player ?opponent)
  (does ?opponent (move3e ?r1 ?c1 ?r2 ?c2))
  (ni ?r1 ?r2 ?r3)
  (ni ?c1 ?c2 ?c3)
  (ni ?r2 ?r3 ?r4)
  (ni ?c2 ?c3 ?c4)
  (ni ?r3 ?r4 ?r)
  (ni ?c3 ?c4 ?c)
)

;; If the player moves away from the cell, it will be blank (b).
(<= (next (cell ?r ?c b))
  (does ?player (move1 ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move2a ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move2b ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move2c ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move3a ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move3b ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move3c ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move3d ?r ?c ?r_ ?c_))
)
(<= (next (cell ?r ?c b))
  (does ?player (move3e ?r ?c ?r_ ?c_))
)

;; Is is already defined, how occupied cell will change when moving. If a cell
;; is occupied by a player, and neither does he move away from it, not does the
;; opponent get there by pushing him, it will stay occupied by the player.
(<= (next (cell ?r ?c ?p))
  (player ?p)             ;; as "blank" (b) does not move, we need to exclude it
  (true (cell ?r ?c ?p))  ;; here to prevent all cells from being b-occupied.
  (not (does ?p (move1 ?r ?c ?r_ ?c_))) ;; the player is not moving away
  (not (does ?p (move2a ?r ?c ?r_ ?c_)))
  (not (does ?p (move2b ?r ?c ?r_ ?c_)))
  (not (does ?p (move2c ?r ?c ?r_ ?c_)))
  (not (does ?p (move3a ?r ?c ?r_ ?c_)))
  (not (does ?p (move3b ?r ?c ?r_ ?c_)))
  (not (does ?p (move3c ?r ?c ?r_ ?c_)))
  (not (does ?p (move3d ?r ?c ?r_ ?c_)))
  (not (does ?p (move3e ?r ?c ?r_ ?c_)))
  (opponent ?p ?o)
  (not (next (cell ?r ?c ?o))) ;; the opponent is not moving there
)

;; As all player occupied cells and changing cells are defined already, an
;; already blank cell will stay blank if no player occupies it.
(<= (next (cell ?r ?c b))
  (true (cell ?r ?c b))
  (not (next (cell ?r ?c x)))
  (not (next (cell ?r ?c o)))
)

;; Pebble Count - As the moves that push a player off the board are separate
;; from the simple pushing moves, detecting if a pebble is pushed off the board
;; is easy.
(<= (next (pebbles ?p 3)) ;; the player loses a pebble
  (player ?p)
  (opponent ?p ?opponent)
  (does ?opponent (move2c ?r1 ?c1 ?r2 ?c2))
  (true (pebbles ?p 4))
)
(<= (next (pebbles ?p 3)) ;; the player loses a pebble
  (player ?p)
  (opponent ?p ?opponent)
  (does ?opponent (move3c ?r1 ?c1 ?r2 ?c2))
  (true (pebbles ?p 4))
)
(<= (next (pebbles ?p 3)) ;; the player loses a pebble
  (player ?p)
  (opponent ?p ?opponent)
  (does ?opponent (move3e ?r1 ?c1 ?r2 ?c2))
  (true (pebbles ?p 4))
)
(<= (next (pebbles ?p 4)) ;; the player stays with his pebbles
  (player ?p)
  (opponent ?p ?opponent)
  (not (does ?opponent (move2c ?r1 ?c1 ?r2 ?c2)))
  (not (does ?opponent (move3c ?r1 ?c1 ?r2 ?c2)))
  (not (does ?opponent (move3e ?r1 ?c1 ?r2 ?c2)))
  (true (pebbles ?p 4))
)

;; Control - The opponent will be in control during the next turn
(<= (next (control x))
    (true (control o)))
(<= (next (control o))
    (true (control x)))


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #5 Legal Moves
;;;;;;;;;;;;;;;;;;;;;;;;;

;; no simultaneous moves
(<= (legal x noop)
    (true (control o)))
(<= (legal o noop)
    (true (control x)))

;; case 1: moving one pebble to a neighboring blank space
(<= (legal ?player (move1 ?r ?c ?r_ ?c_)) ;; moving one piece
  (true (cell ?r ?c ?player)) ;; moving a player pebble
  (true (cell ?r_ ?c_ b)) ;; moving to a blank space
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 2a: moving two pebbles to a neighboring blank space
(<= (legal ?player (move2a ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving two player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn b)) ;; moving to a blank space
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 2b: moving two pebbles pushing one opponent pebble
(<= (legal ?player (move2b ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving two player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (opponent ?player ?opponent)
  (true (cell ?rn ?cn ?opponent)) ;; pushing an opponent
  (ni ?r_ ?rn ?rn2) ;; get the next cell in the direction
  (ni ?c_ ?cn ?cn2)
  (true (cell ?rn2 ?cn2 b)) ;; moving to a blank space
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 2c: moving two pebbles pushing one opponent pebble off the field
(<= (legal ?player (move2c ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving two player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (opponent ?player ?opponent)
  (true (cell ?rn ?cn ?opponent)) ;; pushing an opponent
  (not (ni ?r_ ?rn ?rn2)) ;; pushing the opponent off the field
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 2c_: moving two pebbles pushing one opponent pebble off the field
(<= (legal ?player (move2c ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving two player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (opponent ?player ?opponent)
  (true (cell ?rn ?cn ?opponent)) ;; pushing an opponent
  (not (ni ?c_ ?cn ?cn2)) ;; pushing the opponent off the field
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 3a: moving three pebbles
(<= (legal ?player (move3a ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving three player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn ?player)) ;; third pebble
  (ni ?r_ ?rn ?ro) ;; get the next cell in the direction
  (ni ?c_ ?cn ?co)
  (true (cell ?ro ?co b)) ;; moving to a blank space
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 3b: moving three pebbles pushing one opponent pebble
(<= (legal ?player (move3b ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving three player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn ?player)) ;; third pebble
  (ni ?r_ ?rn ?ro) ;; get the next cell in the direction
  (ni ?c_ ?cn ?co)
  (opponent ?player ?opponent)
  (true (cell ?ro ?co ?opponent)) ;; pushing an opponent
  (ni ?rn ?ro ?rz) ;; get the next cell in the direction
  (ni ?cn ?co ?cz)
  (true (cell ?rz ?cz b)) ;; moving to a blank space
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 3c: moving three pebbles pushing one opponent pebble off the field
(<= (legal ?player (move3c ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving three player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn ?player)) ;; third pebble
  (ni ?r_ ?rn ?ro) ;; get the next cell in the direction
  (ni ?c_ ?cn ?co)
  (opponent ?player ?opponent)
  (true (cell ?ro ?co ?opponent)) ;; pushing an opponent
  (not (ni ?rn ?ro ?ro2)) ;; pushing the opponent off the field
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 3c_: moving three pebbles pushing one opponent pebble off the field
(<= (legal ?player (move3c ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving three player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn ?player)) ;; third pebble
  (ni ?r_ ?rn ?ro) ;; get the next cell in the direction
  (ni ?c_ ?cn ?co)
  (opponent ?player ?opponent)
  (true (cell ?ro ?co ?opponent)) ;; pushing an opponent
  (not (ni ?cn ?co ?co2)) ;; pushing the opponent off the field
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 3d: moving three pebbles pushing two opponent pebbles
(<= (legal ?player (move3d ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving three player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn ?player)) ;; third pebble
  (ni ?r_ ?rn ?ro) ;; get the next cell in the direction
  (ni ?c_ ?cn ?co)
  (opponent ?player ?opponent)
  (true (cell ?ro ?co ?opponent)) ;; pushing an opponent
  (ni ?rn ?ro ?ro2) ;; get the next cell in the direction
  (ni ?cn ?co ?co2)
  (true (cell ?ro2 ?co2 ?opponent)) ;; second opponent pebble
  (ni ?ro ?ro2 ?rz) ;; get the next cell in the direction
  (ni ?co ?co2 ?cz)
  (true (cell ?rz ?cz b)) ;; moving to a blank space
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 3e: moving three pebbles pushing one opponent pebble off the field
(<= (legal ?player (move3e ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving three player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn ?player)) ;; third pebble
  (ni ?r_ ?rn ?ro) ;; get the next cell in the direction
  (ni ?c_ ?cn ?co)
  (opponent ?player ?opponent)
  (true (cell ?ro ?co ?opponent)) ;; pushing an opponent
  (ni ?rn ?ro ?ro2) ;; get the next cell in the direction
  (ni ?cn ?co ?co2)
  (true (cell ?ro2 ?co2 ?opponent)) ;; second opponent pebble
  (not (ni ?ro ?ro2 ?rz)) ;; pushing the opponent off the field
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)

;; case 3e_: moving three pebbles pushing one opponent pebble off the field
(<= (legal ?player (move3e ?r ?c ?r_ ?c_)) ;; moving two pieces
  (true (cell ?r ?c ?player)) ;; moving three player pebbles
  (true (cell ?r_ ?c_ ?player))
  (ni ?r ?r_ ?rn) ;; get the next cell in the direction
  (ni ?c ?c_ ?cn)
  (true (cell ?rn ?cn ?player)) ;; third pebble
  (ni ?r_ ?rn ?ro) ;; get the next cell in the direction
  (ni ?c_ ?cn ?co)
  (opponent ?player ?opponent)
  (true (cell ?ro ?co ?opponent)) ;; pushing an opponent
  (ni ?rn ?ro ?ro2) ;; get the next cell in the direction
  (ni ?cn ?co ?co2)
  (true (cell ?ro2 ?co2 ?opponent)) ;; second opponent pebble
  (not (ni ?co ?co2 ?cz)) ;; pushing the opponent off the field
  (neighboring ?r ?c ?r_ ?c_) ;; neighboring cells
  (true (control ?player)) ;; player is in control
)


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #6 Goals
;;;;;;;;;;;;;;;;;;;;;;;;;

;; If the opponent loses one pebble and remains with 3, he loses -> 100 points
(<= (goal ?p 100)
  (player ?p)
  (opponent ?p ?o)
  (true (pebbles ?o 3))
)

;; If the player loses one pebble and remains with 3, he loses -> 0 points
(<= (goal ?p 0)
  (player ?p)
  (true (pebbles ?p 3))
)


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #7 Terminal States
;;;;;;;;;;;;;;;;;;;;;;;;;

;; If either player only has 3 pebbles left, the game is over.
(<= terminal
  (true (pebbles ?p 3))
)


;;;;;;;;;;;;;;;;;;;;;;;;;
;; #8 Helpers
;;;;;;;;;;;;;;;;;;;;;;;;;

;; finding out the opponent
(opponent x o)
(opponent o x)

;; checking if something is a player
(player x)
(player o)

;; counting
(++ 1 2)
(++ 2 3)
(++ 3 4)
(++ 4 5)
(-- 2 1)
(-- 3 2)
(-- 4 3)
(-- 5 4)

;; comparing numbers
(more 4 3)
(more 4 2)
(more 3 2)
(less 2 3)
(less 2 4)
(less 3 4)
(equal ?n ?n)
